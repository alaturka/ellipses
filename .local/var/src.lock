[
  {
    "source": "lib/ellipses/support/deflate_path.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby file/deflate_path\n",
        "insertion": {
          "before": 2,
          "after": 1,
          "signature": "      Pathname.new(path).cleanpath.expand_path.relative_path_from(base).to_s\n",
          "digest": "1976e6bbac1d69170615f4183a13c86c8f6c029e7c4b988633f3a88b6852268f"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/digest.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby digest/digest\n",
        "insertion": {
          "before": 1,
          "after": 1,
          "signature": "      ::Digest::SHA256.hexdigest args.map(&:to_s).join\n",
          "digest": "5401e49a24d75cd4757807852193fba818f60d73b5857aff6ea66dec266b1b45"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/entropy.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby string/entropy\n",
        "insertion": {
          "before": 0,
          "after": 8,
          "signature": "    # https://rosettacode.org/wiki/Entropy#Ruby\n",
          "digest": "7c42034dffe6c18f192267f5e3fbfc37ecf4b7716026a1593b18176225a4a1d9"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/expand_path.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby file/expand_path\n",
        "insertion": {
          "before": 1,
          "after": 1,
          "signature": "      Pathname.new(::File.join(rootdir || '.', path)).cleanpath.to_s\n",
          "digest": "15cbe2ac533fa83d55a920931e1e1fc3f4ddec4eab8d8bee60ec362e63941de3"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/intersperse_arrays.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby array/intersperse_arrays\n",
        "insertion": {
          "before": 2,
          "after": 3,
          "signature": "        arrays.each { |array| interspersed.append(array, intersperse) }\n",
          "digest": "4f60f888903aa79a8c819f4fb3dd423692d810ea937d0f2d839de0ad4790c26c"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/refinements.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby struct/refinements/from_hash_without_bogus_keys\n",
        "insertion": {
          "before": 5,
          "after": 8,
          "signature": "              bogus = (hash = hash.transform_keys(&:to_sym)).keys.reject { |key| members.include?(key) }\n",
          "digest": "6ac0d7df20519f7ad7680593a83c6207ce2d7c67ea62ad638a24834c13cf6e3e"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/sanitize_path.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby file/sanitize_path\n",
        "insertion": {
          "before": 85,
          "after": 7,
          "signature": "          consumer.define_singleton_method(\"#{meth}!\") do |path, error: nil, base: nil|\n",
          "digest": "ca18006adef41496f0b4b30f39657dd2f08147464b0b2d9acdbf2e7807bbd4bc"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/search_path.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby file/search_path\n",
        "insertion": {
          "before": 1,
          "after": 7,
          "signature": "      Pathname.new(starting_dir).expand_path.ascend.each do |dir|\n",
          "digest": "3cf18f707e195ad4bed4b6af44a4b2608a91625610411e73288a9c6376421e72"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/shell.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby shell/runner\n",
        "insertion": {
          "before": 47,
          "after": 29,
          "signature": "        def handle_sigint(pid) # rubocop:disable Metrics/MethodLength\n",
          "digest": "b69b56eae8397a3dd1c9dd398f14efb9ec92949a87bae490ac7d1b824902a280"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/to_range.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby range/to_range\n",
        "insertion": {
          "before": 4,
          "after": 2,
          "signature": "      else raise ArgumentError, \"Integer or a Range expected where found: #{index_or_range.class}\"\n",
          "digest": "8740a2d06814a2e317c22e5c3f473ac95a49efe96ff49d29e7b85924918b602b"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/ui.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby ui/color\n",
        "insertion": {
          "before": 14,
          "after": 14,
          "signature": "        singleton_class.public_send(:define_method, color) { |string| \"\\e[38;5;#{code}m#{string}\\e[0m\" }\n",
          "digest": "be82b2f4066c82d2e7b41338bd6581a81fbde45028dfaeb51b0a222bcaa0f655"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/updatelines.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby file/updatelines\n",
        "insertion": {
          "before": 9,
          "after": 1,
          "signature": "      end.tap { |status| yield(status) if block_given? }\n",
          "digest": "ce8fc6904f3aade705ae80113791f2f439bfe650028b3805df09da0f92378d86"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/writelines.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby file/writelines\n",
        "insertion": {
          "before": 1,
          "after": 1,
          "signature": "      ::File.write(file, \"#{[*lines].join.chomp}\\n\")\n",
          "digest": "a28abc2ef4ab5dd636b71a287fb32ab262897d0b3d72389fa24e460e68e26990"
        }
      }
    ]
  },
  {
    "source": "lib/ellipses/support/prefixize_non_blank.rb",
    "series": [
      {
        "directive": "    ... github.com/alaturka/alaturka/src/ruby string/prefixize_non_blank\n",
        "insertion": {
          "before": 0,
          "after": 7,
          "signature": "    def prefixize_non_blank(string, prefix, excludes: nil)\n",
          "digest": "4103d062400eb360bbbe9b7c670ce77d8f16e13ddc339b206ed024301ad9f233"
        }
      }
    ]
  }
]
